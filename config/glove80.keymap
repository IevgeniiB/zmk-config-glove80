
/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2023 Innaworks Development Limited, trading as MoErgo
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
/* Include all behaviour includes needed */
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>

/* Automatically generated layer name #define */
#define LAYER_Base 0
#define LAYER_Lower 1
#define LAYER_Magic 2
#define LAYER_Nav 3

/* To deal with the situation where there is no Lower layer, to keep &lower happy */
#ifndef LAYER_Lower
#define LAYER_Lower 0
#endif

/* Extra mods */

#define HYPER(x) LS(LC(LA(LG(x))))

/* Generic macros */

#define ZMK_HELPER_STRINGIFY(x) #x

/* ZMK_BEHAVIOR */

#define ZMK_BEHAVIOR_CORE_caps_word       compatible = "zmk,behavior-caps-word";       #binding-cells = <0>
#define ZMK_BEHAVIOR_CORE_dynamic_macro   compatible = "zmk,behavior-dynamic-macro";   #binding-cells = <1>
#define ZMK_BEHAVIOR_CORE_hold_tap        compatible = "zmk,behavior-hold-tap";        #binding-cells = <2>
#define ZMK_BEHAVIOR_CORE_key_repeat      compatible = "zmk,behavior-key-repeat";      #binding-cells = <0>
#define ZMK_BEHAVIOR_CORE_macro           compatible = "zmk,behavior-macro";           #binding-cells = <0>
#define ZMK_BEHAVIOR_CORE_macro_one_param compatible = "zmk,behavior-macro-one-param"; #binding-cells = <1>
#define ZMK_BEHAVIOR_CORE_macro_two_param compatible = "zmk,behavior-macro-two-param"; #binding-cells = <2>
#define ZMK_BEHAVIOR_CORE_mod_morph       compatible = "zmk,behavior-mod-morph";       #binding-cells = <0>
#define ZMK_BEHAVIOR_CORE_sticky_key      compatible = "zmk,behavior-sticky-key";      #binding-cells = <1>
#define ZMK_BEHAVIOR_CORE_tap_dance       compatible = "zmk,behavior-tap-dance";       #binding-cells = <0>
#define ZMK_BEHAVIOR_CORE_tri_state       compatible = "zmk,behavior-tri-state";       #binding-cells = <0>

#define ZMK_BEHAVIOR(name, type, ...) \
    / { \
        behaviors { \
            name: name { \
                ZMK_BEHAVIOR_CORE_ ## type; \
                __VA_ARGS__ \
            }; \
        }; \
    };

/* Glove80 system behavior & macros */
/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        lower: lower {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo LAYER_Lower>, <&to LAYER_Lower>;
        };
    };
};

/ {
    macros {
        rgb_ug_status_macro: rgb_ug_status_macro {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };
    };
};


/ {
#ifdef BT_DISC_CMD
    behaviors {
        bt_0: bt_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_0";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_0>, <&bt BT_DISC 0>;
        };
        bt_1: bt_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_1";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_1>, <&bt BT_DISC 1>;
        };
        bt_2: bt_2 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_2";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_2>, <&bt BT_DISC 2>;
        };
        bt_3: bt_3 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_3";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_3>, <&bt BT_DISC 3>;
        };
    };
    macros {
        bt_select_0: bt_select_0 {
            label = "BT_SELECT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
        bt_select_1: bt_select_1 {
            label = "BT_SELECT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
        bt_select_2: bt_select_2 {
            label = "BT_SELECT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
        bt_select_3: bt_select_3 {
            label = "BT_SELECT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };
#else
    macros {
        bt_0: bt_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
        bt_1: bt_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
        bt_2: bt_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
        bt_3: bt_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };
#endif
};

/ {
    behaviors {
        magic: magic {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };
    };
};

#define XXX &none
#define ___ &trans

/* #define for key positions */
#define POS_LH_T1 52
#define POS_LH_T2 53
#define POS_LH_T3 54
#define POS_LH_T4 69
#define POS_LH_T5 70
#define POS_LH_T6 71
#define POS_LH_C1R2 15
#define POS_LH_C1R3 27
#define POS_LH_C1R4 39
#define POS_LH_C1R5 51
#define POS_LH_C2R1 4
#define POS_LH_C2R2 14
#define POS_LH_C2R3 26
#define POS_LH_C2R4 38
#define POS_LH_C2R5 50
#define POS_LH_C2R6 68
#define POS_LH_C3R1 3
#define POS_LH_C3R2 13
#define POS_LH_C3R3 25
#define POS_LH_C3R4 37
#define POS_LH_C3R5 49
#define POS_LH_C3R6 67
#define POS_LH_C4R1 2
#define POS_LH_C4R2 12
#define POS_LH_C4R3 24
#define POS_LH_C4R4 36
#define POS_LH_C4R5 48
#define POS_LH_C4R6 66
#define POS_LH_C5R1 1
#define POS_LH_C5R2 11
#define POS_LH_C5R3 23
#define POS_LH_C5R4 35
#define POS_LH_C5R5 47
#define POS_LH_C5R6 65
#define POS_LH_C6R1 0
#define POS_LH_C6R2 10
#define POS_LH_C6R3 22
#define POS_LH_C6R4 34
#define POS_LH_C6R5 46
#define POS_LH_C6R6 64
#define POS_RH_T1 57
#define POS_RH_T2 56
#define POS_RH_T3 55
#define POS_RH_T4 74
#define POS_RH_T5 73
#define POS_RH_T6 72
#define POS_RH_C1R2 16
#define POS_RH_C1R3 28
#define POS_RH_C1R4 40
#define POS_RH_C1R5 58
#define POS_RH_C2R1 5
#define POS_RH_C2R2 17
#define POS_RH_C2R3 29
#define POS_RH_C2R4 41
#define POS_RH_C2R5 59
#define POS_RH_C2R6 75
#define POS_RH_C3R1 6
#define POS_RH_C3R2 18
#define POS_RH_C3R3 30
#define POS_RH_C3R4 42
#define POS_RH_C3R5 60
#define POS_RH_C3R6 76
#define POS_RH_C4R1 7
#define POS_RH_C4R2 19
#define POS_RH_C4R3 31
#define POS_RH_C4R4 43
#define POS_RH_C4R5 61
#define POS_RH_C4R6 77
#define POS_RH_C5R1 8
#define POS_RH_C5R2 20
#define POS_RH_C5R3 32
#define POS_RH_C5R4 44
#define POS_RH_C5R5 62
#define POS_RH_C5R6 78
#define POS_RH_C6R1 9
#define POS_RH_C6R2 21
#define POS_RH_C6R3 33
#define POS_RH_C6R4 45
#define POS_RH_C6R5 63
#define POS_RH_C6R6 79

/* Combos */

#define COMBO_REQUIRE_PRIOR_IDLE_MS 120
#define COMBO_REQUIRE_PRIOR_IDLE_MS_SLOW 250
#define COMBO_TERM_FAST 50
#define COMBO_TERM_SLOW 80
#define COMBO_SAME_FINGER 100

#define ZMK_COMBO(name, combo_bindings, keypos, combo_layers, combo_timeout, prior_idle) \
    / { \
        combos { \
            compatible = "zmk,combos"; \
            combo_ ## name { \
                timeout-ms = <combo_timeout>; \
                bindings = <combo_bindings>; \
                key-positions = <keypos>; \
                layers = <combo_layers>; \
				require-prior-idle-ms = <prior_idle>; \
            }; \
        }; \
    };

ZMK_COMBO(esc       , &kp ESC       , POS_LH_C4R3 POS_LH_C3R3, LAYER_Base LAYER_Nav, COMBO_TERM_FAST, COMBO_REQUIRE_PRIOR_IDLE_MS)
ZMK_COMBO(bspc      , &kp BSPC      , POS_LH_C3R3 POS_LH_C2R3, LAYER_Base LAYER_Nav, COMBO_TERM_FAST, COMBO_REQUIRE_PRIOR_IDLE_MS)

ZMK_COMBO(at        , &kp AT        , POS_LH_C4R3 POS_LH_C4R4, LAYER_Base, COMBO_TERM_SLOW, COMBO_REQUIRE_PRIOR_IDLE_MS)
ZMK_COMBO(pound     , &kp POUND     , POS_LH_C3R3 POS_LH_C3R4, LAYER_Base, COMBO_TERM_SLOW, COMBO_REQUIRE_PRIOR_IDLE_MS)
ZMK_COMBO(dollar    , &kp DOLLAR    , POS_LH_C2R3 POS_LH_C2R4, LAYER_Base, COMBO_TERM_SLOW, COMBO_REQUIRE_PRIOR_IDLE_MS)
ZMK_COMBO(percent   , &kp PERCENT   , POS_LH_C1R3 POS_LH_C1R4, LAYER_Base, COMBO_TERM_SLOW, COMBO_REQUIRE_PRIOR_IDLE_MS)

ZMK_COMBO(tab       , &kp TAB       , POS_LH_C4R4 POS_LH_C3R4, LAYER_Base          , COMBO_TERM_FAST, COMBO_REQUIRE_PRIOR_IDLE_MS)
ZMK_COMBO(enter     , &kp ENTER     , POS_LH_C2R4 POS_LH_C1R4, LAYER_Base LAYER_Nav, COMBO_SAME_FINGER, COMBO_REQUIRE_PRIOR_IDLE_MS)

ZMK_COMBO(grave     , &kp GRAVE     , POS_LH_C4R4 POS_LH_C4R5, LAYER_Base, COMBO_TERM_SLOW, COMBO_REQUIRE_PRIOR_IDLE_MS)
ZMK_COMBO(backslash , &kp BACKSLASH , POS_LH_C3R4 POS_LH_C3R5, LAYER_Base, COMBO_TERM_SLOW, COMBO_REQUIRE_PRIOR_IDLE_MS)
ZMK_COMBO(equal     , &kp EQUAL     , POS_LH_C2R4 POS_LH_C2R5, LAYER_Base, COMBO_TERM_SLOW, COMBO_REQUIRE_PRIOR_IDLE_MS)
ZMK_COMBO(tilde     , &kp TILDE     , POS_LH_C1R4 POS_LH_C1R5, LAYER_Base, COMBO_TERM_SLOW, COMBO_REQUIRE_PRIOR_IDLE_MS)

ZMK_COMBO(cut       , &kp LG(X)     , POS_LH_C5R5 POS_LH_C4R5, LAYER_Base, COMBO_TERM_FAST, COMBO_REQUIRE_PRIOR_IDLE_MS)
ZMK_COMBO(copy      , &kp LG(C)     , POS_LH_C4R5 POS_LH_C3R5, LAYER_Base, COMBO_TERM_FAST, COMBO_REQUIRE_PRIOR_IDLE_MS)
ZMK_COMBO(paste     , &kp LG(V)     , POS_LH_C3R5 POS_LH_C2R5, LAYER_Base, COMBO_TERM_FAST, COMBO_REQUIRE_PRIOR_IDLE_MS)

ZMK_COMBO(bspc2     , &kp BSPC      , POS_RH_C2R3 POS_RH_C3R3, LAYER_Base LAYER_Nav, COMBO_TERM_FAST, COMBO_REQUIRE_PRIOR_IDLE_MS)
ZMK_COMBO(del       , &kp DEL       , POS_RH_C3R3 POS_RH_C4R3, LAYER_Base          , COMBO_TERM_FAST, COMBO_REQUIRE_PRIOR_IDLE_MS)

ZMK_COMBO(caret     , &kp CARET     , POS_RH_C1R3 POS_RH_C1R4, LAYER_Base, COMBO_TERM_SLOW, COMBO_REQUIRE_PRIOR_IDLE_MS)
ZMK_COMBO(plus      , &kp PLUS      , POS_RH_C2R3 POS_RH_C2R4, LAYER_Base, COMBO_TERM_SLOW, COMBO_REQUIRE_PRIOR_IDLE_MS)
ZMK_COMBO(astrk     , &kp ASTRK     , POS_RH_C3R3 POS_RH_C3R4, LAYER_Base, COMBO_TERM_SLOW, COMBO_REQUIRE_PRIOR_IDLE_MS)
ZMK_COMBO(amps      , &kp AMPS      , POS_RH_C4R3 POS_RH_C4R4, LAYER_Base, COMBO_TERM_SLOW, COMBO_REQUIRE_PRIOR_IDLE_MS)

ZMK_COMBO(enter2    , &kp ENTER     , POS_RH_C1R4 POS_RH_C2R4, LAYER_Base, COMBO_SAME_FINGER, COMBO_REQUIRE_PRIOR_IDLE_MS)

ZMK_COMBO(underscore, &kp UNDERSCORE, POS_RH_C1R4 POS_RH_C1R5, LAYER_Base, COMBO_TERM_SLOW, COMBO_REQUIRE_PRIOR_IDLE_MS)
ZMK_COMBO(minus     , &kp MINUS     , POS_RH_C2R4 POS_RH_C2R5, LAYER_Base, COMBO_TERM_SLOW, COMBO_REQUIRE_PRIOR_IDLE_MS)
ZMK_COMBO(slash     , &kp SLASH     , POS_RH_C3R4 POS_RH_C3R5, LAYER_Base, COMBO_TERM_SLOW, COMBO_REQUIRE_PRIOR_IDLE_MS)
ZMK_COMBO(pipe      , &kp PIPE      , POS_RH_C4R4 POS_RH_C4R5, LAYER_Base, COMBO_TERM_SLOW, COMBO_REQUIRE_PRIOR_IDLE_MS)


ZMK_COMBO(hyper_o   , &kp HYPER(O)  , POS_LH_C2R4 POS_RH_C2R4, LAYER_Base, COMBO_TERM_FAST, COMBO_REQUIRE_PRIOR_IDLE_MS_SLOW)
ZMK_COMBO(hyper_s   , &kp HYPER(S)  , POS_LH_C2R5 POS_RH_C2R5, LAYER_Base, COMBO_TERM_FAST, COMBO_REQUIRE_PRIOR_IDLE_MS_SLOW)

/* Homerow mods */

#define KEYS_L POS_LH_C1R2 POS_LH_C1R3 POS_LH_C1R4 POS_LH_C1R5 POS_LH_C2R1 POS_LH_C2R2 POS_LH_C2R3 POS_LH_C2R4 POS_LH_C2R5 POS_LH_C2R6 POS_LH_C3R1 POS_LH_C3R2 POS_LH_C3R3 POS_LH_C3R4 POS_LH_C3R5 POS_LH_C3R6 POS_LH_C4R1 POS_LH_C4R2 POS_LH_C4R3 POS_LH_C4R4 POS_LH_C4R5 POS_LH_C4R6 POS_LH_C5R1 POS_LH_C5R2 POS_LH_C5R3 POS_LH_C5R4 POS_LH_C5R5 POS_LH_C5R6 POS_LH_C6R1 POS_LH_C6R2 POS_LH_C6R3 POS_LH_C6R4 POS_LH_C6R5 POS_LH_C6R6
#define KEYS_R POS_RH_C1R2 POS_RH_C1R3 POS_RH_C1R4 POS_RH_C1R5 POS_RH_C2R1 POS_RH_C2R2 POS_RH_C2R3 POS_RH_C2R4 POS_RH_C2R5 POS_RH_C2R6 POS_RH_C3R1 POS_RH_C3R2 POS_RH_C3R3 POS_RH_C3R4 POS_RH_C3R5 POS_RH_C3R6 POS_RH_C4R1 POS_RH_C4R2 POS_RH_C4R3 POS_RH_C4R4 POS_RH_C4R5 POS_RH_C4R6 POS_RH_C5R1 POS_RH_C5R2 POS_RH_C5R3 POS_RH_C5R4 POS_RH_C5R5 POS_RH_C5R6 POS_RH_C6R1 POS_RH_C6R2 POS_RH_C6R3 POS_RH_C6R4 POS_RH_C6R5 POS_RH_C6R6
#define THUMBS POS_LH_T1 POS_LH_T2 POS_LH_T3 POS_LH_T4 POS_LH_T5 POS_LH_T6 POS_RH_T1 POS_RH_T2 POS_RH_T3 POS_RH_T4 POS_RH_T5 POS_RH_T6

#define QUICK_TAP_MS 175

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_BEHAVIOR(NAME, hold_tap, \
        flavor = "balanced"; \
        tapping-term-ms = <280>; \
        quick-tap-ms = <QUICK_TAP_MS>; \
        require-prior-idle-ms = <210>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )

MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs

/ {
    keymap {
        compatible = "zmk,keymap";


        layer_Base {
            bindings = <
 &kp C_BRI_DN          &kp C_BRI_UP  &kp C_PREV   &kp C_NEXT   &kp C_PP                                                                                &kp C_MUTE   &kp C_VOL_DN  &kp C_VOL_UP  XXX          &kp PAUSE_BREAK
 &kp EQUAL             &kp N1        &kp N2       &kp N3       &kp N4       &kp N5                                                         &kp N6      &kp N7       &kp N8        &kp N9        &kp N0       &kp MINUS
 &kp TAB               &kp Q         &kp W        &kp F        &kp P        &kp B                                                          &kp J       &kp L        &kp U         &kp Y         &kp SEMI     &kp BSLH
 &kp ESC               &hml LSHFT A  &hml LCTRL R &hml LALT S  &hml LGUI T  &kp G                                                          &kp M       &hmr LGUI N  &hmr LALT E   &hmr LCTRL I  &hmr RSHFT O &kp SQT
 &kp GRAVE             &kp Z         &kp X        &kp C        &kp D        &kp V   &kp LSHFT  &kp LCTRL  &lower    XXX   XXX  &kp RSHFT   &kp K       &kp H        &kp COMMA     &kp DOT       &kp FSLH     &kp PG_UP
 &magic LAYER_Magic 0  &kp HOME      &kp END      &kp LEFT     &kp RIGHT            &kp SPACE  &kp LGUI   XXX       XXX   XXX  &mo 3                   &kp DOWN     &kp UP        &kp LBKT      &kp RBKT     &kp PG_DN
            >;
        };

        layer_Lower {
            bindings = <
 &kp F1               &kp F2        &kp F3          &kp F4         &kp F5                                                                           &kp F6      &kp F7        &kp F8        &kp F9           &kp F10
 ___                  XXX           XXX             XXX            XXX             &kp HOME                                   &kp LEFT_PARENTHESIS  &kp KP_NUM  &kp KP_EQUAL  &kp KP_SLASH  &kp KP_MULTIPLY  &kp PRINTSCREEN
 ___                  XXX           XXX             &kp UP_ARROW   XXX             &kp END                                    &kp RIGHT_PARENTHESIS &kp KP_N7   &kp KP_N8     &kp KP_N9     &kp KP_MINUS     &kp SCROLLLOCK
 ___                  XXX           &kp LEFT_ARROW  &kp DOWN_ARROW &kp RIGHT_ARROW &kp PG_UP                                  &kp PERCENT           &kp KP_N4   &kp KP_N5     &kp KP_N6     &kp KP_PLUS      XXX
 ___                  &kp K_APP     XXX             &kp F11        &kp F12         &kp PG_DN  ___  ___  &to 0  ___  ___  ___  &kp COMMA             &kp KP_N1   &kp KP_N2     &kp KP_N3     &kp KP_ENTER     ___
 &magic LAYER_Magic 0 &kp CAPS      &kp INS         &kp F11        &kp F12                    ___  ___  ___    ___  ___  ___                        &kp KP_N0   &kp KP_N0     &kp KP_DOT    &kp KP_ENTER     ___
            >;
        };

        layer_Magic {
            bindings = <
 &bt BT_CLR   XXX              XXX              XXX              XXX                                                                                    XXX   XXX   XXX   XXX  &bt BT_CLR_ALL
 XXX          XXX              XXX              XXX              XXX              XXX                                                             XXX   XXX   XXX   XXX   XXX  XXX
 XXX          &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                 XXX   XXX   XXX   XXX   XXX  XXX
 &bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                 XXX   XXX   XXX   XXX   XXX  &bootloader
 &sys_reset   XXX              XXX              XXX              XXX              XXX              &bt_2   &bt_3  XXX           XXX   XXX   XXX   XXX   XXX   XXX   XXX   XXX  &sys_reset
 XXX          XXX              XXX              XXX              XXX                               &bt_0   &bt_1  &out OUT_USB  XXX   XXX   XXX         XXX   XXX   XXX   XXX  XXX
            >;
        };

        layer_Nav {
            bindings = <
 ___  ___                ___                ___           ___                                                             ___           ___           ___               ___               ___
 ___  ___                ___                ___           ___           ___                                      ___      ___           ___           ___               ___               ___
 ___  ___                ___                ___           ___           ___                                      &kp HOME &kp PG_DN     &kp PG_UP     &kp END           ___               ___
 ___  &kp LSHFT          &kp LCTRL          &kp LALT      &kp LGUI      ___                                      &kp LEFT &kp DOWN      &kp UP        &kp RIGHT         ___               ___
 ___  &kp LC(LS(PG_UP))  &kp LC(LS(PG_DN))  &kp LG(LBKT)  &kp LG(RBKT)  ___    ___  ___  ___  ___  ___  ___      ___      &kp LG(LBKT)  &kp LG(RBKT)  &kp LG(LS(LBKT))  &kp LG(LS(RBKT))  ___
 ___  ___                ___                ___           ___                  ___  ___  ___  ___  ___  ___               ___           ___           &kp LG(LBKT)      &kp LG(RBKT)      ___
            >;
        };
    };
};
